
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_coalesce'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  dbt_coalesce:
    database: coalesce_demo
    # Applies to all files under models/clean/
    clean:
      schema: clean
      materialzied: "{{ 'table' if target.name == 'PROD' else 'view' }}"
    # applies to all files under models/model/
    model:
      schema: modeled
      materialized: table
  # applied to our artifact models
  dbt_artifacts:
    +database: coalesce_demo
    +schema: artifact_model
    +materialized: "{{ 'table' if target.name == 'PROD' else 'view' }}"
    staging:
      +schema: artifact_model_staging
      +materialized: view

on-run-end: "{% if target.name == 'PROD' %}{{ dbt_artifacts.upload_results(results) }}{% endif %}"

vars:
  env: DEV
  # set vars for the dbt_artifacts package
  dbt_artifacts_database: raw_data
  dbt_artifacts_schema: artifacts
  dbt_artifacts_create_schema: true

  # The package can be temporarily disabled using this variable
  dbt_constraints_enabled: true
  # The package can also add constraints on sources if you have sufficient privileges
  dbt_constraints_sources_enabled: false
  # You can also be specific on which constraints are enabled for sources
  # You must also enable dbt_constraints_sources_enabled above
  dbt_constraints_sources_pk_enabled: true
  dbt_constraints_sources_uk_enabled: true
  dbt_constraints_sources_fk_enabled: true
